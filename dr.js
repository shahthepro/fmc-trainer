const { program } = require('commander')

program.option('-c, --case <string>')
program.option('-s, --show-hint <boolean>')
program.parse()
const options = program.opts()

const { inverse, genScramble, genAltScramble } = require("./nissy");

const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout,
})

async function getNextInput(q) {
  return new Promise(r => {
    readline.question(q, (ans) => {
      if (ans === "q") {
        process.exit(0)
      }
      r(ans)
    })
  })
}

const five_move_gen = [
  // 4c4e
  "R",
  "F2 R",
  "R2 U R",
  "R2 U L",
  "R2 U2 R",
  "R2 F2 R",
  "F2 U R",
  "F2 U L",
  "F2 U2 R",
  "F2 B2 R",
  "R L' F2 R",
  "R U2 F2 R",
  "R U2 B2 R",
  "R2 L2 U R",
  "R2 U D R",
  "R2 U D2 R",
  "R2 U D2 L",
  "R2 U D' R",
  "R2 U D' L",
  "R2 U F2 R",
  "R2 U F2 L",
  "R2 U B2 R",
  "R2 U B2 L",
  "R2 U2 D2 R",
  "R2 U2 F2 R",
  "R2 F2 U R",
  "R2 F2 U L",
  "R2 F2 U2 R",
  "R2 F2 U' R",
  "R2 F2 U' L",
  "F2 R2 U R",
  "F2 R2 U L",
  "F2 R2 U2 R",
  "F2 R2 U' R",
  "F2 R2 U' L",
  "F2 U D R",
  "F2 U D2 R",
  "F2 U D2 L",
  "F2 U D' R",
  "F2 U F2 R",
  "F2 U F2 L",
  "F2 U B2 R",
  "F2 U B2 L",
  "F2 U2 D2 R",
  "F2 U2 F2 R",
  "F2 B2 U R",
  "R L U R L",
  "R L' U R L",
  "R L' F2 U2 R",
  "R U R U2 R",
  "R U R2 F2 R",
  "R U R' U L",
  "R U R' F2 L",
  "R U R' B2 R",
  "R U L U' R",
  "R U L2 D' R",
  "R U L' U L",
  "R U L' U' R",
  "R U F2 U' R",
  "R U F2 D R",
  "R U B2 U L",
  "R U2 R U R",
  "R U2 R2 F2 R",
  "R U2 R2 F2 L",
  "R U2 R2 B2 R",
  "R U2 R2 B2 L",
  "R U2 R' U' R",
  "R U2 R' D L",
  "R U' R F2 R",
  "R U' R B2 L",
  "R U' R2 B2 R",
  "R U' R' U2 R",
  "R U' L U R",
  "R U' L U' L",
  "R U' L2 D R",
  "R U' F2 U' L",
  "R U' B2 U R",
  "R U' B2 D' R",
  "R F2 R2 U' R",
  "R F2 R2 D R",
  "R F2 R' D' L",
  "R F2 L2 U R",
  "R F2 L2 D' R",
  "R2 L2 U D2 R",
  "R2 L2 U D' R",
  "R2 L2 U F2 R",
  "R2 L2 U F2 L",
  "R2 L2 F2 U R",
  "R2 L2 F2 U L",
  "R2 U R2 U R",
  "R2 U R2 U L",
  "R2 U R2 U2 R",
  "R2 U R2 U' L",
  "R2 U R2 D R",
  "R2 U R2 D L",
  "R2 U R2 D2 L",
  "R2 U R2 D' R",
  "R2 U R2 D' L",
  "R2 U R2 F2 R",
  "R2 U R2 B2 L",
  "R2 U L2 U L",
  "R2 U L2 U' L",
  "R2 U L2 D L",
  "R2 U L2 D' R",
  "R2 U L2 D' L",
  "R2 U D F2 R",
  "R2 U D' F2 R",
  "R2 U D' B2 R",
  "R2 U F2 U R",
  "R2 U F2 U L",
  "R2 U F2 U2 R",
  "R2 U F2 U2 L",
  "R2 U F2 U' R",
  "R2 U F2 U' L",
  "R2 U F2 D R",
  "R2 U F2 D L",
  "R2 U F2 D2 R",
  "R2 U F2 D2 L",
  "R2 U F2 D' R",
  "R2 U F2 D' L",
  "R2 U F2 B2 R",
  "R2 U F2 B2 L",
  "R2 U B2 U R",
  "R2 U B2 U' L",
  "R2 U B2 D L",
  "R2 U B2 D' R",
  "R2 U B2 D' L",
  "R2 U2 R2 U R",
  "R2 U2 R2 U L",
  "R2 U2 R2 D R",
  "R2 U2 R2 D L",
  "R2 U2 L2 U R",
  "R2 U2 L2 U L",
  "R2 U2 L2 D R",
  "R2 U2 L2 D L",
  "R2 U2 F2 U R",
  "R2 U2 F2 U L",
  "R2 U2 F2 U2 R",
  "R2 U2 F2 U' R",
  "R2 U2 F2 U' L",
  "R2 U2 F2 B2 R",
  "R2 F2 R2 U R",
  "R2 F2 R2 U L",
  "R2 F2 R2 U2 R",
  "R2 F2 R2 U' R",
  "R2 F2 R2 U' L",
  "R2 F2 L2 U R",
  "R2 F2 L2 U L",
  "R2 F2 L2 U' R",
  "R2 F2 L2 U' L",
  "R2 F2 U D R",
  "R2 F2 U D2 R",
  "R2 F2 U D2 L",
  "R2 F2 U D' R",
  "R2 F2 U2 D R",
  "R2 F2 U2 D L",
  "R2 F2 U2 D2 R",
  "R2 F2 U2 F2 R",
  "R2 F2 U' D R",
  "R2 F2 B2 U R",
  "R2 F2 B2 U L",
  "F2 R U2 F2 R",
  "F2 R U2 B2 R",
  "F2 R U2 B2 L",
  "F2 R2 L2 U R",
  "F2 R2 L2 U L",
  "F2 R2 U D2 R",
  "F2 R2 U D2 L",
  "F2 R2 U D' R",
  "F2 R2 U D' L",
  "F2 R2 U2 D R",
  "F2 R2 U2 D L",
  "F2 R2 F2 U R",
  "F2 R2 F2 U' R",
  "F2 R2 B2 U L",
  "F2 R2 B2 U' L",
  "F2 U R2 U R",
  "F2 U R2 U L",
  "F2 U R2 U2 R",
  "F2 U R2 U' R",
  "F2 U R2 U' L",
  "F2 U R2 D R",
  "F2 U R2 D L",
  "F2 U R2 D' R",
  "F2 U R2 D' L",
  "F2 U R2 F2 R",
  "F2 U R2 B2 L",
  "F2 U L2 U L",
  "F2 U L2 U' L",
  "F2 U L2 D L",
  "F2 U D F2 R",
  "F2 U D' F2 R",
  "F2 U F2 U R",
  "F2 U F2 U L",
  "F2 U F2 U2 R",
  "F2 U F2 U2 L",
  "F2 U F2 U' R",
  "F2 U F2 U' L",
  "F2 U F2 D R",
  "F2 U F2 D L",
  "F2 U F2 D2 R",
  "F2 U F2 D2 L",
  "F2 U F2 D' R",
  "F2 U F2 D' L",
  "F2 U F2 B2 R",
  "F2 U F2 B2 L",
  "F2 U B2 U R",
  "F2 U B2 U' R",
  "F2 U B2 U' L",
  "F2 U B2 D L",
  "F2 U B2 D' R",
  "F2 U2 R2 U R",
  "F2 U2 R2 U L",
  "F2 U2 R2 U' R",
  "F2 U2 R2 U' L",
  "F2 U2 R2 D R",
  "F2 U2 R2 D L",
  "F2 U2 R2 D' R",
  "F2 U2 R2 D' L",
  "F2 U2 R2 F2 R",
  "F2 U2 F2 U R",
  "F2 U2 F2 U L",
  "F2 U2 F2 U2 R",
  "F2 U2 F2 D R",
  "F2 U2 F2 D L",
  "F2 U2 F2 D2 R",
  "F2 U2 F2 B2 R",
  "F2 B2 R2 U R",
  "F2 B2 R2 U L",
  "F2 B2 U D2 R",
  "F2 B2 U D' R",
  "F2 B2 U F2 R",
  "F2 B2 U F2 L",
  "F2 B2 U2 D2 R",

  // 4c2e
  "R U2 R",
  "F2 R U2 R",
  "F2 R D2 R",
  "R U R2 U' R",
  "R U R2 D R",
  "R U L2 U R",
  "R U2 R2 D R",
  "R U2 R2 D' R",
  "R U2 F2 B2 L",
  "R U' R2 U R",
  "R U' R2 D' R",
  "R U' L2 U' R",
  "R F2 U F2 R",
  "R F2 U' F2 R",
  "R2 U R D2 R",
  "R2 U R B2 R",
  "R2 U R' U2 R",
  "R2 U R' D2 R",
  "R2 U R' F2 R",
  "R2 U2 R D2 R",
  "R2 F2 R U2 R",
  "R2 F2 R D2 R",
  "F2 U R U2 R",
  "F2 U R D2 R",
  "F2 U R F2 R",
  "F2 U R' U2 R",
  "F2 U R' D2 R",
  "F2 U R' B2 R",
  "F2 U2 R D2 R",
  "F2 U2 R F2 R",
  "F2 U2 R B2 R",
  "F2 B2 R U2 R",

  // 3c2e
  "R U R",
  "R U' R",
  "R L2 U R",
  "R L2 U' R",
  "F2 R U R",
  "R U R U' R",
  "R U R' U' R",
  "R U' R U R",
  "R2 U R U R",
  "R2 U R D R",
  "R2 U R D' R",
  "R2 U R' U R",
  "R2 U R' U' R",
  "R2 U R' D R",
  "R2 U R' D' R",
  "R2 U L D L",
  "R2 U L D' L",
  "R2 U L' D L",
  "R2 U L' D' L",
  "R2 U2 R U R",
  "R2 U2 R U' R",
  "R2 U2 R D R",
  "R2 U2 R D' R",
  "R2 U2 L U L",
  "R2 U2 L U' L",
  "R2 U2 L D L",
  "R2 U2 L D' L",
  "R2 F2 R D R",
  "F2 R L2 U' R",
  "F2 U R U R",
  "F2 U R U' R",
  "F2 U R D R",
  "F2 U R D' R",
  "F2 U R' U R",
  "F2 U R' U' R",
  "F2 U R' D R",
  "F2 U R' D' R",
  "F2 U L U L",
  "F2 U L U' L",
  "F2 U L' U L",
  "F2 U L' U' L",
  "F2 U2 R U' R",
  "F2 U2 R D R",
  "F2 U2 R D' R",
]

const cases = {
  "5M": five_move_gen
}

async function main() {
  let counter = 0

  const allCases = cases[options.case?.toUpperCase()] || cases["5M"]

  while (true) {
    counter++

    const activeCase = allCases[
      Math.floor(Math.random() * allCases.length)
    ]
    const optimalLen = activeCase.split(" ").length
    const htrScramble = genScramble({ 
      len: 10,
      quarterTurns: []
    })

    try {
      const { scramble, orientation } = await genAltScramble(`${htrScramble} ${inverse(activeCase)}`, true)

      const hints = options.showHint ? [
        ``,
        `EO: ${orientation}`,
        `Optimal: ${optimalLen} moves)`,
        `Case: ${activeCase}`,
      ].join('\n\t') : ''
  
      await getNextInput(`${counter}. ${scramble}${hints}\n`)
    } catch (err) {

      console.log(err, htrScramble, activeCase)
    }

  }
}

main()
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
  .then(() => {
    process.exit(0)
  })